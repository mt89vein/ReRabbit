{
  "$schema": "./JsonSchemas/rerabbit.schema.json",
  "ServiceName": "sample-service-name",
  "ConnectionStrings": {
    "RedisConnection": "localhost:6379"
  },
  "RabbitMq": {
    "UniqueMessagesMiddlewareSettings": {
      "MessageExpirySeconds": 100
    },
    "Connections": {
      "DefaultConnection": {
        "UseAsyncConsumer": true,
        "VirtualHosts": {
          "/": {
            "Queues": {
              "Q1Subscriber": {
                "QueueName": "q1",
                "UseDeadLetter": true,
                "ScalingSettings": {
                  "ChannelsCount": 1,
                  "ConsumersPerChannel": 2,
                  "MessagesPerConsumer": 1,
                  "MessagesPerChannel": 1
                },
                "RetrySettings": {
                  "IsEnabled": true,
                  "RetryPolicy": "CustomRoundRobin",
                  "RetryDelayInSeconds": 15,
                  "RetryCount": 2
                },
                "Bindings": [
                  {
                    "FromExchange": "test-exchange",
                    "ExchangeType": "direct",
                    "RoutingKeys": [
                      "rk1",
                      "rk2"
                    ]
                  }
                ]
              }
            },
            "Events": {
              "TestMessage": {
                "Version": "v1",
                "Exchange": {
                  "Name": "test-exchange",
                  "Type": "direct",
                  "Durable": true
                },
                "RouteType": "Constant",
                "Route": "rk1"
              }
            }
          },
          "TESTHOST": {
            "UserName": "guest1",
            "Password": "guest1",
            "Queues": {
              "Q2Subscriber": {
                "QueueName": "q2",
                "Bindings": [
                  {
                    "FromExchange": "test-exchange",
                    "ExchangeType": "direct",
                    "RoutingKeys": [
                      "rk1",
                      "rk2"
                    ]
                  }
                ]
              }
            }
          }
        }
      },
      "SecondConnection": {
        "UseAsyncConsumer": true,
        "VirtualHosts": {
          "/": {
            "UserName": "guest",
            "Password": "guest",
            "Queues": {
              "Q3Subscriber": {
                "QueueName": "q-metrics",
                "Bindings": [
                  {
                    "FromExchange": "metrics",
                    "ExchangeType": "fanout"
                  }
                ],
                "RetrySettings": {
                  "IsEnabled": false
                },
                "Middlewares": [
                  "TestMiddleware"
                ]
              },
              "Q4Subscriber": {
                "QueueName": "q4-topic",
                "Bindings": [
                  {
                    "FromExchange": "topics",
                    "ExchangeType": "topic",
                    "RoutingKeys": [
                      "order.#",
                      "*.created"
                    ]
                  }
                ],
                "Middlewares": [
                  "TestMiddleware",
                  "TestMiddleware2"
                ],
                "RetrySettings": {
                  "IsEnabled": false
                }
              },
              "Q5Subscriber": {
                "QueueName": "q5-header",
                "Bindings": [
                  {
                    "FromExchange": "header",
                    "ExchangeType": "headers",
                    "Arguments": {
                      "x-match": "any",
                      "type": "button"
                    }
                  }
                ],
                "RetrySettings": {
                  "IsEnabled": false
                }
              }
            }
          }
        }
      }
    }
  },
  "Logging": {
    "LogLevel": {
      "Default": "Warning"
    }
  },
  "AllowedHosts": "*"
}