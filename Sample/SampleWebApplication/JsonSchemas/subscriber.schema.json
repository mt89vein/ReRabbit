{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "type": "object",
  "title": "Queues",
  "default": {
    "DefaultSubscriber": {
      "QueueName": "example-queue",
      "Bindings": [
        {
          "FromExchange": "example-exchange",
          "RoutingKeys": [
            "example-routing-key"
          ]
        }
      ]
    }
  },
  "additionalProperties": {
    "type": "object",
    "title": "Queue subscriber configuration",
    "required": [
      "QueueName"
    ],
    "properties": {
      "QueueName": {
        "$id": "#/properties/QueueName",
        "type": "string",
        "title": "The queue name",
        "minLength": 1,
        "examples": [
          "q1"
        ],
        "pattern": "^(.*)$"
      },
      "UseModelTypeAsSuffix": {
        "$id": "#/properties/UseModelTypeAsSuffix",
        "type": "boolean",
        "title": "If set to true, the name of the message type will be added as suffix to queue name.",
        "default": false,
        "examples": [
          false
        ]
      },
      "Durable": {
        "$id": "#/properties/Durable",
        "type": "boolean",
        "title": "If set to true, this queue will survive broker restart.",
        "default": true,
        "examples": [
          true
        ]
      },
      "Exclusive": {
        "$id": "#/properties/Exclusive",
        "type": "boolean",
        "title": "Single consumer queue. If consumer disconnect, this queue will be deleted.",
        "default": false,
        "examples": [
          false
        ]
      },
      "AutoDelete": {
        "$id": "#/properties/AutoDelete",
        "type": "boolean",
        "title": "If all consumers disconnect, this queue will be deleted.",
        "default": false,
        "examples": [
          false
        ]
      },
      "AutoAck": {
        "$id": "#/properties/AutoAck",
        "type": "boolean",
        "title": "Auto message acknowledgement.",
        "default": false,
        "examples": [
          false
        ]
      },
      "UseDeadLetter": {
        "$id": "#/properties/UseDeadLetter",
        "type": "boolean",
        "title": "If set to true, a queue will be created to store messages that cannot be processed due to a handler error",
        "default": false,
        "examples": [
          true
        ]
      },
      "TracingSettings": {
        "$id": "#/properties/TracingSettings",
        "type": "object",
        "title": "Global tracing settings.",
        "default": {
          "IsEnabled": true,
          "GenerateIfNotPresent": true,
          "LogWhenGenerated": true
        },
        "properties": {
          "IsEnabled": {
            "$id": "#/properties/TracingSettings/properties/IsEnabled",
            "type": "boolean",
            "title": "Is need to use tracing for this consumer.",
            "default": true,
            "examples": [
              true
            ]
          },
          "GenerateIfNotPresent": {
            "$id": "#/properties/TracingSettings/properties/GenerateIfNotPresent",
            "type": "boolean",
            "title": "Is need to generate TraceId if not present in header.",
            "default": true,
            "examples": [
              true
            ]
          },
          "LogWhenGenerated": {
            "$id": "#/properties/TracingSettings/properties/LogWhenGenerated",
            "type": "boolean",
            "title": "Is need to log info message, when TraceId was generated.",
            "default": true,
            "examples": [
              true
            ]
          }
        }
      },
      "ScalingSettings": {
        "$id": "#/properties/ScalingSettings",
        "type": "object",
        "title": "Scaling settings.",
        "default": {
          "ChannelsCount": 1,
          "ConsumersPerChannel": 1,
          "MessagesPerConsumer": 1,
          "MessagesPerChannel": 0
        },
        "properties": {
          "ChannelsCount": {
            "$id": "#/properties/ScalingSettings/properties/ChannelsCount",
            "type": "integer",
            "title": "Required channels count.",
            "default": 1,
            "examples": [
              1
            ]
          },
          "ConsumersPerChannel": {
            "$id": "#/properties/ScalingSettings/properties/ConsumersPerChannel",
            "type": "integer",
            "title": "The count of consumers per channel.",
            "default": 1,
            "examples": [
              2
            ]
          },
          "MessagesPerConsumer": {
            "$id": "#/properties/ScalingSettings/properties/MessagesPerConsumer",
            "type": "integer",
            "title": "The count of unacked messages per consumer.",
            "default": 1,
            "examples": [
              1
            ]
          },
          "MessagesPerChannel": {
            "$id": "#/properties/ScalingSettings/properties/MessagesPerChannel",
            "type": "integer",
            "title": "The count of unacked messages per channel.",
            "default": 0,
            "examples": [
              1
            ]
          },
          "UseSingleActiveConsumer": {
            "$id": "#/properties/ScalingSettings/properties/UseSingleActiveConsumer",
            "type": "boolean",
            "title": "Use single active consumer at a time. If consumer disconnects broker automatically fail over to another consumer.",
            "default": false,
            "examples": [
              true,
              false
            ]
          } 
        }
      },
      "RetrySettings": {
        "$id": "#/properties/RetrySettings",
        "type": "object",
        "title": "Retry message handle settings.",
        "default": {
          "IsEnabled": true,
          "LogOnRetry": false,
          "LogOnFailLastRetry": true,
          "DoInfinityRetries": false,
          "RetryPolicy": "Constant",
          "RetryDelayInSeconds": 10,
          "RetryCount": 5
        },
        "properties": {
          "IsEnabled": {
            "$id": "#/properties/RetrySettings/properties/IsEnabled",
            "type": "boolean",
            "title": "Is retrying enabled.",
            "default": true,
            "examples": [
              true
            ]
          },
          "LogOnRetry": {
            "$id": "#/properties/RetrySettings/properties/LogOnRetry",
            "type": "boolean",
            "title": "Is need to log information on retry message handle.",
            "default": false,
            "examples": [
              true
            ]
          },
          "LogOnFailLastRetry": {
            "$id": "#/properties/RetrySettings/properties/LogOnFailLastRetry",
            "type": "boolean",
            "title": "Is need to log information if message could not be processed for the specified number of retries",
            "default": true,
            "examples": [
              true
            ]
          },
          "DoInfinityRetries": {
            "$id": "#/properties/RetrySettings/properties/DoInfinityRetries",
            "type": "boolean",
            "title": "Infinity retry count. RetryCount property will be ignored.",
            "default": false,
            "examples": [
              false
            ]
          },
          "RetryPolicy": {
            "$id": "#/properties/RetrySettings/properties/RetryPolicy",
            "type": "string",
            "title": "The delay computing policy type.",
            "default": "Constant",
            "enum": [
              "Constant",
              "Linear",
              "Exponential"
            ]
          },
          "RetryDelayInSeconds": {
            "$id": "#/properties/RetrySettings/properties/RetryDelayInSeconds",
            "type": "integer",
            "title": "Retry Delay In Seconds. Constant policy uses this value. Linear uses this value as a step.",
            "default": 20,
            "examples": [
              3,
              5,
              10,
              15,
              20,
              60,
              120
            ]
          },
          "RetryMaxDelayInSeconds": {
            "$id": "#/properties/RetrySettings/properties/RetryMaxDelayInSeconds",
            "type": "integer",
            "title": "Maximum retry delay in seconds. Useful for exponential and linear policies.",
            "default": 180,
            "examples": [
              60,
              100,
              300,
              600,
              3600
            ]
          },
          "RetryCount": {
            "$id": "#/properties/properties/RetryCount",
            "type": "integer",
            "title": "The count of retries.",
            "default": 5,
            "examples": [
              1,
              3,
              5,
              10
            ]
          }
        }
      },
      "Bindings": {
        "$id": "#/properties/Bindings",
        "type": "array",
        "title": "The Bindings Schema",
        "default": [
          {
            "FromExchange": "",
            "ExchangeType": "direct",
            "RoutingKeys": [
              ""
            ]
          }
        ],
        "items": {
          "$id": "#/properties/Bindings/items",
          "type": "object",
          "title": "The Items Schema",
          "oneOf": [
            {
              "properties": {
                "ExchangeType": {
                  "const": "headers"
                }
              },
              "required": [
                "FromExchange",
                "Arguments"
              ]
            },
            {
              "properties": {
                "ExchangeType": {
                  "const": "fanout"
                }
              },
              "required": [
                "FromExchange"
              ]
            },
            {
              "properties": {
                "ExchangeType": {
                  "const": "direct"
                }
              },
              "required": [
                "FromExchange",
                "RoutingKeys"
              ]
            },
            {
              "properties": {
                "ExchangeType": {
                  "const": "topic"
                }
              },
              "required": [
                "FromExchange",
                "RoutingKeys"
              ]
            }
          ],
          "properties": {
            "FromExchange": {
              "$id": "#/properties/Bindings/properties/FromExchange",
              "type": "string",
              "title": "Exchange name for bind queue.",
              "default": "",
              "examples": [
                "some-exchange-name"
              ],
              "pattern": "^(.*)$"
            },
            "ExchangeType": {
              "$id": "#/properties/Bindings/properties/ExchangeType",
              "type": "string",
              "title": "Rabbitmq exchange type.",
              "default": "direct",
              "examples": [
                "direct",
                "fanout",
                "topic",
                "headers"
              ]
            },
            "RoutingKeys": {
              "$id": "#/properties/Bindings/properties/RoutingKeys",
              "type": "array",
              "title": "Routing keys for bind from exchange.",
              "items": {
                "$id": "#/properties/Bindings/properties/RoutingKeys/items",
                "type": "string",
                "title": "Routing key.",
                "default": "",
                "examples": [
                  "example-routing-key",
                  "another-routing-key"
                ],
                "pattern": "^(.*)$"
              }
            },
            "Arguments": {
              "$id": "#/properties/Bindings/propertis/Arguments",
              "type": "object",
              "title": "Arguments for header exchange.",
              "default": {
                "x-match": "any"
              },
              "required": [
                "x-match"
              ],
              "properties": {
                "x-match": {
                  "type": "string",
                  "enum": [
                    "any",
                    "all"
                  ]
                }
              }
            }
          }
        }
      }
    }
  }
}